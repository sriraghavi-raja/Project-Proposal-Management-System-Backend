import React, { useState, useEffect } from 'react';
import { Menu, X, Bell, User, ArrowRight, BarChart3, Users, FileText, Calendar, Layers, Compass, Home, Briefcase, TrendingUp, BookOpen, Send, LogIn, UserPlus, LogOut, LayoutDashboard, CheckCircle, Clock, Settings } from 'lucide-react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import HeroImg from '../assets/Hero-Img.jpg';

// --- Global Constants & Mock State ---
const TAGLINE = "Streamline Your Project Lifecycle";

// Links for the Liquid Navigation
const LIQUID_NAV_LINKS = [
    { name: 'Home', href: '#home', icon: Home, isAuthenticated: false },
    { name: 'Proposals', href: '#proposals', icon: Briefcase, isAuthenticated: true },
    { name: 'Analytics', href: '#analytics', icon: TrendingUp, isAuthenticated: true },
    { name: 'About', href: '#about', icon: BookOpen, isAuthenticated: false },
    { name: 'Contact', href: '#contact', icon: Send, isAuthenticated: false },
];

// --- Dashboard Sidebar Links ---
const DASHBOARD_LINKS = [
    { name: 'Dashboard', href: '/dashboard', icon: LayoutDashboard },
    { name: 'Proposals', href: '/proposals', icon: FileText },
    { name: 'Evaluations', href: '/evaluations', icon: CheckCircle },
    { name: 'Milestones', href: '/milestones', icon: Clock },
    { name: 'Project Manager', href: '/project-manager', icon: Briefcase },
    { name: 'Analytics', href: '/analytics', icon: BarChart3 },
];

// --- NEW COLOR PALETTE (Based on Design Image) ---
const PALETTE = {
    DEEP_PURPLE: '#1a0b2e', // Dark background
    MEDIUM_PURPLE: '#2d1b4e', // Secondary background
    BRIGHT_PURPLE: '#7c3aed', // Main highlight/button
    ACCENT_PINK: '#ec4899', // Bright accent
    ACCENT_CYAN: '#06b6d4', // Cyan accent
    WHITE: '#ffffff',
    GRAY: '#9ca3af',
};

// --- CSS Keyframes for Animations ---
const AnimatedBackground = () => (
    <>
        <style>
            {`
            @keyframes morph {
                0% { border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%; }
                50% { border-radius: 40% 60% 70% 30% / 30% 70% 40% 60%; }
                100% { border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%; }
            }
            .animate-morph-1 {
                animation: morph 20s linear infinite alternate;
                background: radial-gradient(circle at 50% 50%, ${PALETTE.BRIGHT_PURPLE}30 0%, transparent 70%);
            }
            .animate-morph-2 {
                animation: morph 25s linear infinite reverse;
                background: radial-gradient(circle at 50% 50%, ${PALETTE.ACCENT_PINK}20 0%, transparent 70%);
            }
            .animate-morph-3 {
                animation: morph 30s linear infinite alternate;
                background: radial-gradient(circle at 50% 50%, ${PALETTE.ACCENT_CYAN}15 0%, transparent 70%);
            }
            `}
        </style>
        {/* Layer 1: Slower, larger morphing blob */}
        <div 
            className="absolute top-[-5%] left-[-5%] w-[110%] h-[110%] opacity-40 animate-morph-1 blur-3xl z-0" 
            style={{ transform: 'rotate(10deg)' }}
        ></div>
        {/* Layer 2: Faster, smaller morphing blob */}
        <div 
            className="absolute bottom-[-10%] right-[-10%] w-[120%] h-[120%] opacity-30 animate-morph-2 blur-3xl z-0" 
            style={{ transform: 'rotate(-20deg)' }}
        ></div>
        {/* Layer 3: Cyan accent blob */}
        <div 
            className="absolute top-[30%] left-[20%] w-[80%] h-[80%] opacity-20 animate-morph-3 blur-3xl z-0" 
            style={{ transform: 'rotate(45deg)' }}
        ></div>
        {/* Layer 4: Subtle static radial gradient */}
        <div className="absolute inset-0 z-0" style={{ background: `radial-gradient(circle at 50% 50%, ${PALETTE.DEEP_PURPLE} 0%, #000000 100%)`, opacity: 0.9 }}></div>
    </>
);

// --- DASHBOARD SIDEBAR COMPONENT ---
const DashboardSidebar = ({ isOpen, setIsOpen, activePath }) => {
    // Close sidebar when clicking outside
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (isOpen && !event.target.closest('.sidebar-content') && !event.target.closest('.sidebar-toggle')) {
                setIsOpen(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [isOpen, setIsOpen]);

    // Close sidebar on escape key
    useEffect(() => {
        const handleEscape = (event) => {
            if (event.key === 'Escape' && isOpen) {
                setIsOpen(false);
            }
        };

        document.addEventListener('keydown', handleEscape);
        return () => document.removeEventListener('keydown', handleEscape);
    }, [isOpen, setIsOpen]);

    const SidebarItem = ({ name, href, icon: Icon, isActive, onClick }) => {
        return (
            <Link 
                to={href}
                onClick={onClick}
                className={`flex items-center space-x-4 p-4 rounded-2xl transition-all duration-200 text-white font-semibold group
                    ${isActive 
                        ? `bg-gradient-to-r from-purple-600 to-pink-500 text-white shadow-lg` 
                        : `hover:bg-white/10 text-gray-200`
                    }`}
            >
                <Icon className="w-6 h-6" style={{ color: isActive ? PALETTE.WHITE : PALETTE.GRAY }} />
                <span className="text-lg">{name}</span>
            </Link>
        );
    };

    return (
        <>
            {/* Overlay */}
            <div 
                className={`fixed inset-0 z-[9998] bg-black/50 transition-all duration-500 ease-in-out ${
                    isOpen ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'
                }`}
                onClick={() => setIsOpen(false)}
            />

            {/* Sidebar Panel */}
            <div
                className={`fixed top-0 right-0 h-full w-80 max-w-[90vw] z-[9999] transform transition-transform duration-500 ease-in-out sidebar-content ${
                    isOpen ? 'translate-x-0' : 'translate-x-full'
                }`}
            >
                <div 
                    className="h-full rounded-l-3xl border-l border-white/20 bg-white/10 backdrop-blur-xl shadow-2xl flex flex-col p-6"
                    style={{ 
                        boxShadow: '-8px 0 32px 0 rgba(0, 0, 0, 0.37)',
                        background: 'linear-gradient(135deg, rgba(124, 58, 237, 0.15) 0%, rgba(236, 72, 153, 0.1) 100%)'
                    }}
                >
                    {/* Header - Removed Dashboard text and Welcome message */}
                    <div className="flex justify-end items-center mb-8">
                        {/* Close button */}
                        <button 
                            className="p-3 rounded-2xl hover:bg-white/10 text-gray-200 transition-colors duration-200 sidebar-toggle"
                            onClick={() => setIsOpen(false)}
                        >
                            <X className="w-7 h-7" />
                        </button>
                    </div>

                    {/* Navigation Links */}
                    <nav className="flex-1 space-y-3 overflow-y-auto">
                        {DASHBOARD_LINKS.map((link) => (
                            <SidebarItem
                                key={link.name}
                                name={link.name}
                                href={link.href}
                                icon={link.icon}
                                isActive={activePath === link.href}
                                onClick={() => setIsOpen(false)}
                            />
                        ))}
                    </nav>

                    {/* Footer Section */}
                    <div className="pt-6 border-t border-white/10 mt-6 space-y-3">
                        <SidebarItem
                            name="Profile"
                            href="/profile"
                            icon={User}
                            isActive={activePath === '/profile'}
                            onClick={() => setIsOpen(false)}
                        />
                        <SidebarItem
                            name="Settings"
                            href="/settings"
                            icon={Settings}
                            isActive={activePath === '/settings'}
                            onClick={() => setIsOpen(false)}
                        />
                    </div>
                </div>
            </div>
        </>
    );
};

// --- SIDEBAR TOGGLE BUTTON ---
const SidebarToggleButton = ({ isOpen, setIsOpen }) => (
    <button 
        className="p-3 rounded-2xl hover:bg-white/10 transition-all duration-300 text-gray-200 sidebar-toggle group"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Toggle Sidebar Menu"
    >
        <div className="relative">
            {isOpen ? (
                <X className="w-6 h-6 transform transition-transform duration-300 group-hover:scale-110" />
            ) : (
                <LayoutDashboard className="w-6 h-6 transform transition-transform duration-300 group-hover:scale-110" />
            )}
        </div>
    </button>
);

// --- FROSTED NAVBAR COMPONENT (Desktop) - Updated with bigger fonts ---
const ModernNavbar = ({ isSidebarOpen, setIsSidebarOpen }) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const { isAuthenticated, user, logout } = useAuth();
    const navigate = useNavigate();
    const location = useLocation();

    const handleLogout = async () => {
        await logout();
        navigate('/');
        setIsSidebarOpen(false);
    };

    const navLinks = [
        { name: 'About Us', href: '#about' },
        { name: 'Services', href: '#services' },
        { name: 'Contact Us', href: '#contact' },
        { name: 'Blog', href: '#blog' },
    ];

    return (
        <nav className="fixed top-0 left-0 right-0 z-[100] p-4 sm:p-6">
                <div 
                    className="max-w-7xl mx-auto px-6 py-3 flex justify-between items-center rounded-2xl sm:rounded-3xl border border-white/20 bg-white/10 backdrop-blur-xl shadow-2xl transition-all duration-300"
                    style={{ 
                        boxShadow: '0 8px 32px 0 rgba(0, 0, 0, 0.37)' 
                    }}
                >
                    {/* Left: Logo and App Name */}
                    <Link to="/" className="flex items-center">
                        <div className="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-purple-600 to-pink-500 rounded-full flex items-center justify-center shadow-lg">
                            <span className="text-white font-bold text-xl">P</span>
                        </div>
                        <span className="ml-3 text-white font-extrabold text-2xl sm:text-3xl tracking-wider">
                            ProposalHub
                        </span>
                    </Link>

                    {/* Center: Navigation Links (Desktop) */}
                    <div className="hidden lg:flex lg:space-x-10 items-center">
                        {navLinks.map((link) => (
                            <a
                                key={link.name}
                                href={link.href}
                                className="flex items-center text-lg font-semibold text-gray-200 hover:text-white transition-colors duration-200"
                            >
                                {link.name}
                            </a>
                        ))}
                    </div>

                    {/* Right: User Actions (Login/Profile, CTA) */}
                    <div className="flex items-center space-x-4">
                        {isAuthenticated ? (
                            <div className="flex items-center space-x-4">
                                {/* Notifications Icon */}
                                <button className="p-3 rounded-full hover:bg-white/10 transition-colors duration-200 text-gray-200">
                                    <Bell className="w-6 h-6" />
                                </button>
                                
                                {/* User Profile/Avatar */}
                                <Link 
                                    to="/profile"
                                    className="flex items-center space-x-2 px-4 py-3 rounded-full bg-white/20 hover:bg-white/30 text-white font-semibold transition-all duration-200 hover:scale-105 transform"
                                >
                                    <User className="w-6 h-6" />
                                    <span className='text-lg hidden sm:inline'>{user?.firstName || 'Profile'}</span>
                                </Link>

                                {/* Logout Button */}
                                <button 
                                    onClick={handleLogout}
                                    className="flex items-center space-x-2 px-5 py-3 text-lg font-semibold rounded-full text-white transition-colors duration-200 bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600"
                                    style={{ boxShadow: '0 4px 15px rgba(124, 58, 237, 0.5)' }}
                                >
                                    <LogOut className="w-5 h-5" />
                                    <span className="hidden sm:inline">Logout</span>
                                </button>
                            </div>
                        ) : (
                            <div className="flex items-center space-x-4">
                                {/* Sign In Button */}
                                <Link 
                                    to="/login"
                                    className="flex items-center space-x-2 px-6 py-3 text-lg font-semibold rounded-full text-white transition-all duration-200 bg-gradient-to-r from-purple-600 to-pink-500 hover:from-purple-700 hover:to-pink-600 hover:scale-105 transform"
                                    style={{ boxShadow: '0 4px 15px rgba(124, 58, 237, 0.5)' }}
                                >
                                    <LogIn className="w-5 h-5" />
                                    <span>Sign In</span>
                                </Link>
                            </div>
                        )}

                        {/* Mobile Menu Button */}
                        <button
                            className="lg:hidden p-3 rounded-md hover:bg-white/10 transition-colors duration-200 text-gray-200"
                            onClick={() => setIsMenuOpen(!isMenuOpen)}
                        >
                            {isMenuOpen ? <X className="w-7 h-7" /> : <Menu className="w-7 h-7" />}
                        </button>
                    </div>
                </div>

                {/* Mobile Menu Panel */}
                {isMenuOpen && (
                    <div className="lg:hidden mt-2 p-4 rounded-xl border border-white/20 bg-white/10 backdrop-blur-xl shadow-lg">
                        <div className="flex flex-col space-y-3">
                            {navLinks.map((link) => (
                                <a
                                    key={link.name}
                                    href={link.href}
                                    className="text-gray-200 hover:text-white transition-colors duration-200 py-2 text-lg font-semibold"
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    {link.name}
                                </a>
                            ))}
                            
                            {/* Dashboard Link for Mobile */}
                            {isAuthenticated && (
                                <Link 
                                    to="/dashboard"
                                    className="flex items-center space-x-2 text-gray-200 hover:text-white transition-colors duration-200 py-2 text-lg font-semibold"
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    <LayoutDashboard className="w-5 h-5" />
                                    <span>Dashboard</span>
                                </Link>
                            )}
                            
                            {!isAuthenticated && (
                                <div className="flex flex-col space-y-2 pt-3 border-t border-white/20">
                                    <Link 
                                        to="/login" 
                                        className="flex items-center justify-center space-x-2 py-3 text-lg font-semibold text-white rounded-lg bg-gradient-to-r from-purple-600 to-pink-500"
                                        onClick={() => setIsMenuOpen(false)}
                                    >
                                        <LogIn className="w-5 h-5" />
                                        <span>Sign In</span>
                                    </Link>
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </nav>
    );
};

// --- FEATURE CAROUSEL COMPONENT ---
const FeatureCarousel = () => {
    const [currentIndex, setCurrentIndex] = useState(0);
    
    const carouselItems = [
        {
            id: 1,
            icon: <FileText className="w-12 h-12" />,
            title: "Proposal Management",
            description: "Comprehensive submission system with configurable stages, budget management, and team collaboration.",
            requirement: "FR4",
            imageQuery: "Project management document icon",
        },
        {
            id: 2,
            icon: <Users className="w-12 h-12" />,
            title: "Role-Based Access Control",
            description: "Specialized RBAC for Admin, PI, Reviewer, and Financial Officer with granular permissions.",
            requirement: "FR3",
            imageQuery: "Team collaboration software UI",
        },
        {
            id: 3,
            icon: <BarChart3 className="w-12 h-12" />,
            title: "Advanced Analytics & BI",
            description: "Executive dashboards with predictive modeling and comprehensive performance insights.",
            requirement: "FR9",
            imageQuery: "Business intelligence dashboard mockup",
        },
        {
            id: 4,
            icon: <Calendar className="w-12 h-12" />,
            title: "Project Lifecycle Tracking",
            description: "End-to-end management from approval through project completion and deliverables.",
            requirement: "FR6",
            imageQuery: "Project timeline software UI",
        },
        {
            id: 5,
            icon: <Layers className="w-12 h-12" />,
            title: "High Performance & Security",
            description: "Scalable architecture handling 1000+ users with enterprise-grade security.",
            requirement: "FR2, FR3.3",
            imageQuery: "High security server racks",
        },
        {
            id: 6,
            icon: <Compass className="w-12 h-12" />,
            title: "Workflow Management",
            description: "Configurable approval routing with automated triggers and multi-stage processes.",
            requirement: "FR8",
            imageQuery: "Workflow automation diagram",
        }
    ];

    useEffect(() => {
        const interval = setInterval(() => {
            setCurrentIndex((prevIndex) => 
                (prevIndex + 1) % carouselItems.length
            );
        }, 5000);

        return () => clearInterval(interval);
    }, [carouselItems.length]);

    const goToSlide = (index) => {
        setCurrentIndex(index);
    };

    const getCardStyle = (index) => {
        const total = carouselItems.length;
        const diff = index - currentIndex;
        const normalizedDiff = (diff + total) % total;
        
        let zIndex = 1;
        let scale = 0.85;
        let opacity = 0;
        let translateX = 0;

        if (index === currentIndex) {
            zIndex = 10;
            scale = 1;
            opacity = 1;
            translateX = '0%';
        } else if (normalizedDiff === 1) { 
            zIndex = 5;
            scale = 0.9;
            opacity = 1;
            translateX = '50%';
        } else if (normalizedDiff === total - 1) { 
            zIndex = 5;
            scale = 0.9;
            opacity = 1;
            translateX = '-50%';
        } else if (normalizedDiff === 2) { 
            scale = 0.7;
            opacity = 0.5;
            translateX = '90%';
        } else if (normalizedDiff === total - 2) { 
            scale = 0.7;
            opacity = 0.5;
            translateX = '-90%';
        }

        return {
            zIndex: zIndex,
            transform: `translateX(calc(-50% + ${translateX})) scale(${scale})`,
            opacity: opacity,
        };
    };

    return (
        <div id="features" className="w-full max-w-6xl mx-auto py-12 px-4 flex flex-col items-center">
            <div className="text-center mb-12">
                <h2 className="text-4xl font-extrabold text-white mb-4 drop-shadow-lg">Core Platform Features</h2>
                <p className="text-gray-300 text-xl max-w-2xl mx-auto">See how ProposalHub streamlines your project management lifecycle with powerful tools.</p>
            </div>

            <div className="relative h-[400px] flex items-center justify-end w-full">
                
                {/* Carousel Cards */}
                {carouselItems.map((item, index) => (
                    <div 
                        key={item.id} 
                        className="absolute w-[80%] md:w-[60%] lg:w-[45%] h-[350px] p-8 rounded-3xl backdrop-blur-xl border border-white/20 shadow-2xl transition-all duration-500 ease-in-out cursor-pointer flex flex-col justify-center items-center text-center"
                        style={{
                            ...getCardStyle(index),
                            background: 'linear-gradient(135deg, rgba(124, 58, 237, 0.2) 0%, rgba(236, 72, 153, 0.15) 100%)',
                        }}
                        onClick={() => goToSlide(index)}
                    >
                        <div className="text-white mb-4 p-4 rounded-full bg-gradient-to-r from-purple-600 to-pink-500 shadow-lg">
                            {item.icon}
                        </div>
                        <span className="inline-block px-4 py-2 bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-full text-sm font-semibold border border-white/20 mb-3 shadow-md">
                            {item.requirement}
                        </span>
                        <h3 className="text-2xl font-bold text-white mb-2">{item.title}</h3>
                        <p className="text-gray-300 text-base leading-relaxed">{item.description}</p>
                    </div>
                ))}

                {/* Navigation Arrows */}
                <button 
                    onClick={() => goToSlide((currentIndex - 1 + carouselItems.length) % carouselItems.length)}
                    className="absolute left-0 lg:left-8 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-white/20 hover:bg-white/30 rounded-full shadow-lg flex items-center justify-center transition-all duration-200 backdrop-blur-sm border border-white/20 z-20"
                >
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                <button 
                    onClick={() => goToSlide((currentIndex + 1) % carouselItems.length)}
                    className="absolute right-0 lg:right-8 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-white/20 hover:bg-white/30 rounded-full shadow-lg flex items-center justify-center transition-all duration-200 backdrop-blur-sm border border-white/20 z-20"
                >
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                </button>

            </div>

            {/* Pagination Dots */}
            <div className="flex justify-center space-x-3 mt-12">
                {carouselItems.map((_, index) => (
                    <button
                        key={index}
                        onClick={() => goToSlide(index)}
                        className={`w-3 h-3 rounded-full transition-all duration-300 ${
                            currentIndex === index 
                                ? 'w-8' : ''
                        }`}
                        style={{
                            backgroundColor: currentIndex === index ? PALETTE.BRIGHT_PURPLE : PALETTE.GRAY,
                        }}
                        aria-label={`Go to feature ${index + 1}`}
                    />
                ))}
            </div>
        </div>
    );
};

// --- HERO SECTION ---
const HeroSection = () => {
    const { user, isAuthenticated } = useAuth();
    const navigate = useNavigate();

    // Helper function to get dashboard route based on user role
    const getDashboardRoute = (role) => {
        switch (role?.toUpperCase()) {
            case 'ADMIN':
                return '/admin-dashboard';
            case 'PROJECT_MANAGER':
                return '/project-manager-dashboard';
            case 'PRINCIPAL_INVESTIGATOR':
                return '/principal-investigator-dashboard';
            case 'COMMITTEE_CHAIR':
                return '/committee-chair-dashboard';
            case 'COMMITTEE_MEMBER':
            case 'REVIEWER':
                return '/reviewer-dashboard';
            case 'DEPARTMENT_HEAD':
                return '/department-head-dashboard';
            case 'FINANCE':
            case 'FINANCIAL_OFFICER':
                return '/financial-officer-dashboard';
            case 'STAKEHOLDER':
                return '/stakeholder-dashboard';
            default:
                return '/dashboard'; // Fallback to generic dashboard
        }
    };

    const handleDashboardClick = () => {
        if (isAuthenticated && user?.role) {
            const dashboardRoute = getDashboardRoute(user.role);
            navigate(dashboardRoute);
        } else {
            navigate('/login');
        }
    };

    return (
        <header 
            id="home"
            className="min-h-screen flex flex-col items-center justify-center relative overflow-hidden pt-32 pb-48 lg:pb-12"
            style={{ 
                backgroundColor: PALETTE.DEEP_PURPLE,
                backgroundImage: `url(${HeroImg})`,
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundRepeat: 'no-repeat',
            }}
        >
            {/* Dark overlay for better text readability */}
            <div className="absolute inset-0 bg-gradient-to-b from-black/60 via-purple-900/40 to-black/70 z-0"></div>
            
            <AnimatedBackground />

            <div className="relative z-10 max-w-7xl w-full mx-auto px-6 sm:px-8 lg:px-12 pt-16 flex flex-col items-center text-center">
                
                <h1 className="text-5xl sm:text-7xl lg:text-8xl font-extrabold mb-4 leading-tight drop-shadow-2xl">
                    Welcome to 
                    <span className="block text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-pink-400 to-cyan-400">Proposal Hub</span>
                </h1>
                
                <p className="text-xl sm:text-2xl text-gray-200 max-w-4xl mb-10 drop-shadow-lg font-medium">
                    {TAGLINE}. The comprehensive platform for administrators, evaluators, and PIs to handle projects from submission to completion.
                </p>

                <button 
                    onClick={handleDashboardClick}
                    className="px-10 py-4 text-white font-bold text-lg rounded-full shadow-2xl transition-all duration-300 transform hover:scale-110 flex items-center justify-center mb-12 bg-gradient-to-r from-purple-600 via-pink-500 to-cyan-500 hover:from-purple-700 hover:via-pink-600 hover:to-cyan-600"
                    style={{ boxShadow: `0 10px 30px rgba(124, 58, 237, 0.6)` }}
                >
                    {isAuthenticated ? 'Go To Dashboard' : 'Get Started'}
                    <ArrowRight className="ml-3" size={24} />
                </button>
            </div>
        </header>
    );
};

// --- STATS SECTION ---
const StatsSection = () => {
    const stats = [
        { number: "99.9%", label: "Uptime (FR3.3)", color: PALETTE.BRIGHT_PURPLE },
        { number: "1000+", label: "Concurrent Users (FR3.3)", color: PALETTE.ACCENT_PINK },
        { number: "< 2s", label: "Search Response Time (FR3.3)", color: PALETTE.ACCENT_CYAN },
        { number: "JWT", label: "Security Standard (FR2)", color: PALETTE.MEDIUM_PURPLE }
    ];

    return (
        <section className="py-20" style={{ backgroundColor: '#0f0a1e' }}>
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
                    {stats.map((stat, index) => (
                        <div key={index} className="text-center p-6 rounded-xl border border-white/10 bg-white/5 transition-all duration-300 hover:bg-white/10 transform hover:scale-[1.05] shadow-xl hover:shadow-2xl">
                            <div className="text-5xl lg:text-6xl font-extrabold mb-3" style={{ color: stat.color }}>
                                {stat.number}
                            </div>
                            <div className="text-gray-300 text-lg font-medium">
                                {stat.label}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </section>
    );
};

// --- CONTACT FOOTER ---
const ContactFooter = () => {
    return (
        <footer id="contact" className="bg-gray-900 border-t border-gray-800 text-white py-12">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="grid grid-cols-2 md:grid-cols-5 gap-10">
                    {/* Column 1: Logo and Tagline */}
                    <div className="col-span-2 md:col-span-1">
                        <div className="flex items-center mb-4">
                            <div className="w-10 h-10 rounded-lg flex items-center justify-center shadow-lg bg-gradient-to-br from-purple-600 to-pink-500">
                                <span className="text-white font-bold text-lg">P</span>
                            </div>
                            <span className="ml-2 text-white font-bold text-xl">ProposalHub</span>
                        </div>
                        <p className="text-gray-400 mb-4 text-sm">
                            {TAGLINE}
                        </p>
                    </div>

                    {/* Column 2: Product */}
                    <div className="md:col-span-1">
                        <h3 className="font-extrabold mb-4 text-white uppercase tracking-wider text-sm">Product</h3>
                        <ul className="space-y-3 text-gray-400 text-sm">
                            <li><a href="#features" className="hover:text-white transition-colors">Features</a></li>
                            <li><a href="#" className="hover:text-white transition-colors">API & Integration</a></li>
                            <li><a href="#" className="hover:text-white transition-colors">Documentation</a></li>
                        </ul>
                    </div>

                    {/* Column 3: Company */}
                    <div className="md:col-span-1">
                        <h3 className="font-extrabold mb-4 text-white uppercase tracking-wider text-sm">Company</h3>
                        <ul className="space-y-3 text-gray-400 text-sm">
                            <li><a href="#about" className="hover:text-white transition-colors">About Us</a></li>
                            <li><a href="#" className="hover:text-white transition-colors">Careers</a></li>
                            <li><a href="#" className="hover:text-white transition-colors">Legal</a></li>
                        </ul>
                    </div>

                    {/* Column 4: Resources */}
                    <div className="md:col-span-1">
                        <h3 className="font-extrabold mb-4 text-white uppercase tracking-wider text-sm">Resources</h3>
                        <ul className="space-y-3 text-gray-400 text-sm">
                            <li><a href="#" className="hover:text-white transition-colors">Help Center</a></li>
                            <li><a href="#" className="hover:text-white transition-colors">System Status</a></li>
                        </ul>
                    </div>
                    
                    {/* Column 5: Contact */}
                    <div className="md:col-span-1">
                         <h3 className="font-extrabold mb-4 text-white uppercase tracking-wider text-sm">Contact</h3>
                         <ul className="space-y-3 text-gray-400 text-sm">
                            <li>Email: <a href="mailto:support@proposalhub.com" className="text-purple-400 hover:underline">support@...</a></li>
                            <li>Phone: +1 (555) 123-4567</li>
                        </ul>
                        <div className="flex space-x-3 mt-6">
                            <div className="w-8 h-8 rounded-full border border-gray-700 hover:border-purple-500 flex items-center justify-center transition-colors"><svg className="w-4 h-4 text-gray-400 hover:text-purple-400" fill="currentColor" viewBox="0 0 24 24"><path d="M14 12h-4v-2h4v2zm7-6v12c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2zm-2 0H5v12h14V6z"/></svg></div>
                            <div className="w-8 h-8 rounded-full border border-gray-700 hover:border-pink-500 flex items-center justify-center transition-colors"><svg className="w-4 h-4 text-gray-400 hover:text-pink-400" fill="currentColor" viewBox="0 0 24 24"><path d="M22.54 6.42a8.88 8.88 0 01-2.58.71 4.54 4.54 0 001.9-2.5 9 9 0 01-2.86 1.1 4.5 4.5 0 00-7.7 4.1 12.8 12.8 0 01-9.35-4.74 4.53 4.53 0 001.4 6.03 4.47 4.47 0 01-2-.55v.05c0 2 1.4 3.7 3.3 4.1a4.52 4.52 0 01-2 .08 4.5 4.5 0 004.2 3.1 9 9 0 01-5.6 1.95c-.37 0-.74-.02-1.1-.06a12.8 12.8 0 006.9 2.02c8.3 0 12.8-6.9 12.8-12.8v-.58a9 9 0 002.2-2.3"/></svg></div>
                            <div className="w-8 h-8 rounded-full border border-gray-700 hover:border-cyan-500 flex items-center justify-center transition-colors"><svg className="w-4 h-4 text-gray-400 hover:text-cyan-400" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"/></svg></div>
                        </div>
                    </div>
                </div>

                <div className="border-t border-gray-800 mt-10 pt-6 text-center text-gray-500 text-sm">
                    <p>&copy; {new Date().getFullYear()} ProposalHub. All rights reserved.</p>
                </div>
            </div>
        </footer>
    );
};

// --- Mobile Liquid Navigation ---
const MobileLiquidNavigation = ({ isAuthenticated, links }) => {
    const defaultActiveIndex = isAuthenticated ? links.findIndex(l => l.name === 'Proposals') : links.findIndex(l => l.name === 'Home');
    const [activeIndex, setActiveIndex] = useState(defaultActiveIndex !== -1 ? defaultActiveIndex : 0);
    const filteredLinks = links.filter(link => !link.isAuthenticated || isAuthenticated);

    if (filteredLinks.length === 0) return null;

    const linkWidthPercentage = 100 / filteredLinks.length;
    const blobLeft = `${(activeIndex * linkWidthPercentage) + (linkWidthPercentage / 2)}%`;
    
    const activeColor = PALETTE.BRIGHT_PURPLE; 
    const blobShadowColor = 'rgba(124, 58, 237, 0.7)';

    return (
        <div className="fixed bottom-0 left-0 right-0 z-[100] lg:hidden">
            <div 
                className="max-w-md mx-auto p-3 mb-4 rounded-3xl border border-white/30 bg-white/50 backdrop-blur-xl shadow-2xl transition-all duration-300"
                style={{
                    boxShadow: '0 10px 30px rgba(0,0,0,0.2)'
                }}
            >
                <div className="relative flex justify-around items-end h-14">
                    
                    {/* The Hyper-Responsive Liquid Blob */}
                    <div
                        className="absolute top-0 w-12 h-12 rounded-full transform -translate-y-1/2 transition-all duration-500 ease-in-out"
                        style={{
                            left: blobLeft,
                            transform: `translateX(-50%) translateY(-50%)`,
                            background: 'linear-gradient(135deg, #7c3aed 0%, #ec4899 100%)',
                            boxShadow: `0 4px 15px ${blobShadowColor}`
                        }}
                    />

                    {/* Navigation Items */}
                    {filteredLinks.map((link, index) => {
                        const Icon = link.icon;
                        const isActive = index === activeIndex;

                        return (
                            <a
                                key={link.name}
                                href={link.href}
                                onClick={() => setActiveIndex(index)}
                                className={`flex flex-col items-center justify-center p-2 z-10 w-1/5 transition-all duration-300 relative`}
                            >
                                <Icon 
                                    className={`w-6 h-6 transition-all duration-500 ease-in-out ${
                                        isActive ? 'text-white translate-y-[-10px] scale-110' : 'text-gray-700 hover:text-gray-900'
                                    }`} 
                                />
                                <span 
                                    className={`text-xs font-medium transition-all duration-500 ease-in-out absolute bottom-0 ${
                                        isActive ? 'text-gray-900 opacity-100 translate-y-2' : 'text-gray-500 opacity-0 translate-y-5'
                                    }`}
                                >
                                    {link.name}
                                </span>
                            </a>
                        );
                    })}

                </div>
            </div>
        </div>
    );
};

// --- MAIN HOMEPAGE COMPONENT ---
const HomePage = () => {
    const { isAuthenticated } = useAuth();
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const location = useLocation();
    
    return (
        <div className="min-h-screen" style={{ backgroundColor: PALETTE.DEEP_PURPLE }}>
            {/* Dashboard Sidebar */}
            {isAuthenticated && (
                <DashboardSidebar 
                    isOpen={isSidebarOpen}
                    setIsOpen={setIsSidebarOpen}
                    activePath={location.pathname}
                />
            )}

            {/* Sidebar Toggle Button - Fixed at Top Right Corner */}
            {isAuthenticated && (
                <button
                    onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                    className="fixed top-4 right-4 z-[200] p-4 rounded-2xl hover:bg-white/10 transition-all duration-300 text-gray-200 sidebar-toggle group backdrop-blur-xl border border-white/20 bg-white/5 shadow-2xl"
                    aria-label="Toggle Sidebar Menu"
                    style={{ 
                        boxShadow: '0 8px 32px 0 rgba(0, 0, 0, 0.37)' 
                    }}
                >
                    <Menu 
                        className={`w-7 h-7 transition-transform duration-300 ${
                            isSidebarOpen ? 'rotate-90 scale-110' : 'group-hover:scale-110'
                        }`} 
                    />
                </button>
            )}

            {/* Desktop Navigation */}
            <ModernNavbar 
                isSidebarOpen={isSidebarOpen}
                setIsSidebarOpen={setIsSidebarOpen}
            />
            
            <HeroSection />
            
            <FeatureCarousel />
            
            <StatsSection />
            <ContactFooter />

            {/* Mobile Bottom Liquid Navigation */}
            <MobileLiquidNavigation 
                isAuthenticated={isAuthenticated} 
                links={LIQUID_NAV_LINKS} 
            />
        </div>
    );
};

export default HomePage;